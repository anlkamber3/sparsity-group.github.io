#!/usr/bin/env python3

import ftplib
import keyring
import logging
import os
import subprocess as sp
import sys

logger = logging.getLogger()
stream_handler = logging.StreamHandler()
stream_handler.setFormatter(logging.Formatter(
    "%(asctime)s [%(levelname)s]  %(message)s"))
logger.addHandler(stream_handler)
logger.setLevel(logging.INFO)

server = 'ftp.fastmail.com'
username = 'rahul@sent.com'
# lol you thought my password would be here?
password = keyring.get_password('FastMail FTP', username)
local_path = os.path.join(os.getcwd(), 'public')
remote_path = '/rahul.sent.com/files/site'

ftp = ftplib.FTP(server, username, password)


def make_site():
    cp = sp.run(['stack', 'exec', 'site', 'rebuild'], stdout=sp.PIPE)
    if cp.returncode != 0:
        logger.error("building site failed")
        sys.exit(1)
    logger.info("clean building site")


def ftp_upload_dir(path, remote_path=None):
    if remote_path:
        # sometimes the remote dir doesn't exist, fail if it doesn't
        try:
            ftp.cwd(remote_path)
            ftp.cwd('..')
            for f in ftp.nlst(remote_path):
                # it's either a file or directory
                try:
                    ftp.delete(os.path.join(remote_path, f))
                except BaseException:
                    ftp.rmd(os.path.join(remote_path, f))

            logger.info(
                "deleting contents of remote directory {}".format(remote_path))
        except Exception as ex:
            logger.error(
                "remote directory {} does not exist: {}\nCreate remote directory in FastMail then try again.".format(
                    remote_path, str(ex)))
            sys.exit(1)

        ftp.cwd(remote_path)
        logger.info("changing into remote directory {}".format(remote_path))

    files = os.listdir(path)
    logger.info("changing into local directory {}".format(path))
    os.chdir(path)
    for f in files:
        fpath = os.path.join(path, f)
        if os.path.isfile(fpath):
            fh = open(f, 'rb')
            ftp.storbinary('STOR %s' % f, fh)
            logger.info("uploading {}".format(fpath))
            fh.close()
        elif os.path.isdir(fpath):
            ftp.mkd(f)
            ftp.cwd(f)
            logger.info("creating remote directory for {}".format(fpath))
            ftp_upload_dir(fpath)
        else:
            logger.error("{} is neither a file nor a directory".format(fpath))
            sys.exit(1)

    ftp.cwd('..')
    os.chdir('..')


def main():
    make_site()
    ftp_upload_dir(local_path, remote_path)


if __name__ == '__main__':
    main()

